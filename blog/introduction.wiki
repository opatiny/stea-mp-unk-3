!!!!1. Introduction 
En 1969, dans la fusée Apollo 11 se trouvait le premier AGC (Apollo Guidance computer) : l'ordinateur le plus 
puissant de son temps, développé par MIT, qui a coûté aux alentours de 10 millions de dollars à produire $$nasa.gov$$. 
Pourtant, il 
n'était composé que de 12'300 transistors (l'entité de base d'un micro-processeur), alors que l'iPhone 6, 
en comparaison, en contient environ 1,6 milliards $$curiouDroid$$...

 ((https://oci.gyre.ch/blog/public/1718/gyp/p/oceane-patiny/.dskyAGC_m.jpg||C))
 __Schéma 1 : Le DSKY (Display and Keyboard) de l'ordinateur central des fusées Apollo. $$Computers in Spaceflight: The NASA Experience - Chapter Two  - Computers On Board The Apollo Spacecraft. (n.d.). Retrieved April 18, 2018, from https://history.nasa.gov/computers/Ch2-4.html$$__

Ainsi, le matériel électronique et les ressources informatiques nécessaires à l'utilisation de celui-ci deviennent 
toujours plus accessibles et performantes. Cela a des conséquences très simples : au lieu d'être seulement utilisées 
par des scientifiques 
pour la construction d'outils à la pointe de la technologie, l'électronique et l'informatique sont utilisées 
par tout un chacun pour réaliser une multitude de projets. Certains sont intéressants, pratiques ou esthétiques, 
tandis que d'autres, on peut le dire, sont justes saugrenus.
Souvent, ces projets nécessitent un micro-contrôleur, qui va s'occuper d'associer des ''inputs'' à ''des outputs'' et 
différents périphériques : des LEDs, des moteurs, 
des ventilateurs, des lasers et/ou tout un panel de capteurs (température, humidité, pression, luminosité, ...), selon les besoins.
Une rapide recherche dans un navigateur internet permet de prendre conscience du nombre de projets existants, 
qui semble croître exponentiellement. Par exemple, rien que pour le type de micro-contôleur Arduino, qui est 
une plateforme très appréciée car facile à utiliser tant pour faire des prototypes que des produits finis, 
on peut trouver des pages internet qui listent plusieurs centaines de projets qui l'utilisent $$130+ Arduino Projects with Source Code, Schematics &amp; Complete DIY Explanation. (n.d.). Retrieved April 18, 2018, from https://circuitdigest.com/arduino-projects$$ $$200+ Arduino Projects List For Final Year Students. (n.d.). Retrieved April 18, 2018, from https://www.electronicshub.org/arduino-project-ideas/$$.

Ce projet s'inscrit dans ce mouvement de créations électroniques réalisées par des personnes sans formation 
dans ce domaine. Ce que l'on veut dévelloper n'a pas réellement d'intérêt pratique, mais sa fabrication nous 
permet d'acquérir des connaissances et de s'amuser. Initialement, le projet est né suite à la récupération 
imprévue d'une vieille valise à codes sur un tas de déchêts encombrants. L'objectif était alors le suivant: 
placer, à l'intérieur de cette valise, du matériel électronique qui permettrait de la faire fonctionner comme 
un lecteur MP3 autonome. 
Le projet s'étant nettement précisé depuis le début, voici les objectifs que nous désirons 
obtenir $$Les expressions "affichage led", "carte perforée" et "lecteur de cartes" sont définies dans le projet 
hiver qu'on trouve [ici|https://oci.gyre.ch/blog/?post/2018/02/01/18H-patiny|]$$:

*Contrôle du volume.
*Lorsqu’une carte perforée est introduite dans le lecteur de cartes, le morceau correspondant doit être joué.
*Lorsqu’on joue un morceau, son titre, le nom du groupe et le temps restant sont affichés sur l’affichage LED, si la place manque, le texte défile de droite à gauche.
*Possibilité de jouer une trentaine de morceaux différents.
*Mise en veille du CHIP afin de réduire la consommation énergétique sans devoir débrancher de fils.
*Un mode "single song" où une carte est insérée, puis le morceau correspondant est joué.
*Un mode "playlist" : les cartes sont insérées l’une après l’autre et les morceaux sont joués à tour de rôle.

!!!1.1 Principes et technologies
Lors du projet hiver, la partie ''hardware'' a été fortement développée, pour cette 
partie printemps, ce sera le ''software'' qui sera le plus mis en avant.

Ce projet est basé sur deux micro-contrôleurs : un ATmega32U4 (le micro-contrôleur de la majorité des Arduino) et un CHIP, qui est davantage un micro-ordinateur. L'atMega32U4 sert à produire des données qui seront ensuite récupérées par le CHIP: il est l'entité intelligente de ''cardReader'' et sert donc à scanner la carte perforée qui y est insérée pour obtenir son identifiant, mesurer la température, mesurer la luminosité et enfin, stocker le mode du bouton 3 positions.
Le CHIP, quant à lui, est nécessaire car il permet notamment de jouer des fichiers MP3, d'autres avantages sont sa sortie jack 1/4 de pouce, sa mémoire importante (4Gb) et son Wi-Fi incorporé $$chip reference$$.

Une partie majeure du projet est d'établir une connection entre ces deux modules, ainsi que l'afficheur LED, pour permettre de faire circuler des informations entre eux. Pour cela, nous utilisons le protocole de communication I2C (Inter-Integrated Circuit). Ce protocole est standard pour énormément de micro-contrôleurs et de prériphériques et il permet à un ''master'' de s'adresser jusqu'à 1008 ''slaves'' sur un seul bus. Le protocole utilise deux fils: SDA (fil de données de l'I2C) et SCL (horloge de l'I2C). Aussi, c'est toujours le maître qui s'adresse aux esclaves, il peut ne communiquer qu'avec un seul module à la fois. Les paquets de données I2C sont formés deux parties principales: une adresse (7 bits) et des données (8 bits). Le détail des paquets est représenté ci-dessous.

 ((https://oci.gyre.ch/blog/public/1718/gyp/p/oceane-patiny/.i2cProtocol_m.png||C))
 __Schéma 1 : Structure des paquets I2C. $$__

Dans notre projet, nous avons un ''master'', le CHIP, et 17 ''slaves'', l'ATmega32U4 et les 16 PCA9685 qui se trouvent sur les modules de l'afficheur LED. La particularité de cardReader est que nous avons dû en faire un esclave I2C et donc superviser la communication avec ce protocole à un bas niveau. Cela est expliqué dans la partie ''Méthodes''.

!!!1.2 Librairies
Lors de ce projet, deux types de librairies ont été utilisées : des librairies Arduino et les librairies Node $$definition node??!!$$. 
En général, ces librairies ont permis le fonctionnement de modules I2C (comme le PCA9685), l'utilisation de protocoles de communication (serial) et de permettre certaines fonctionalités dans la partie JavaScript du code (comme avoir des délais).

!!1.2.1 Librairies Arduino
Voici les librairies utilisées dans la partie Arduino du ''software'' :
*__pca9685__ : contrôle du composant homonyme en I2C.
*__Wire__ : supervision des communications en I2C.
*__NilRTOS__ : multithread de l'Arduino.

!!1.2.2 Librairies Node
Voici les librairies utilisées dans la partie JavaScript du ''software'' :
*__debug__ : messages d'erreur dans le terminal affichés selon les programmes JavaScript pour lesquels c'est demandé.
*__delay__ : offre la possibilité de mettre des délais dans les programmes JavaScript.
*__mplayer-as-promised__ : lancement, arrêt, reprise et temps restant d'un morceau de musique.
*__i2c-bus__ : communication en I2C entre le CHIP et l'ATmega32U4.
*__child_process__ : exécute des scripts bash depuis un programme JavaScript (exec).
*__spawn-promise__ : librairie qui adapte child_process.spawn pour utiliser des ''promise''.
